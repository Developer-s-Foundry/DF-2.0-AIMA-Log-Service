import dotenv from "dotenv";

dotenv.config();

 
enum ENVIRONMENT_VARIABLES {
  SERVER_PORT = "SERVER_PORT",
  DATABASE_NAME = "DATABASE_NAME",
  DATABASE_USERNAME = "DATABASE_USERNAME",
  DATABASE_PASSWORD = "DATABASE_PASSWORD",
  DATABASE_HOST = "DATABASE_HOST",
  DATABASE_PORT = "DATABASE_PORT",
  NODE_ENV = "NODE_ENV",
  GATEWAY_SECRET_KEY= 'GATEWAY_SECRET_KEY',
  JOB_NAME='JOB_NAME',
  RABBITMQ_URL='RABBITMQ_URL',
  QUEUE_NAME='QUEUE_NAME',
  QUEUE_NAME_RMQ='QUEUE_NAME_RMQ',
  REDIS_PASSWORD='REDIS_PASSWORD',
  REDIS_HOST='REDIS_HOST',
  REDIS_PORT='REDIS_PORT'

}

function getEnv(variableName: ENVIRONMENT_VARIABLES) {
  const envKey = ENVIRONMENT_VARIABLES[variableName];
  const foundEnv = process.env[envKey];
  const message = `${envKey} was not found`;
  if (!foundEnv) {
    console.log(message);
    throw Error(message);
  }
  return foundEnv;
}

export const APP_CONFIGS = {
  SERVER_PORT: getEnv(ENVIRONMENT_VARIABLES.SERVER_PORT),
  DATABASE_NAME: getEnv(ENVIRONMENT_VARIABLES.DATABASE_NAME),
  DATABASE_USERNAME: getEnv(ENVIRONMENT_VARIABLES.DATABASE_USERNAME),
  DATABASE_PASSWORD: getEnv(ENVIRONMENT_VARIABLES.DATABASE_PASSWORD),
  DATABASE_HOST: getEnv(ENVIRONMENT_VARIABLES.DATABASE_HOST),
  DATABASE_PORT: getEnv(ENVIRONMENT_VARIABLES.DATABASE_PORT),
  NODE_ENV: getEnv(ENVIRONMENT_VARIABLES.NODE_ENV),
  GATEWAY_SECRET_KEY: getEnv(ENVIRONMENT_VARIABLES.GATEWAY_SECRET_KEY),
  RABBITMQ_URL: getEnv(ENVIRONMENT_VARIABLES.RABBITMQ_URL),
  JOB_NAME: getEnv(ENVIRONMENT_VARIABLES.JOB_NAME),
  QUEUE_NAME: getEnv(ENVIRONMENT_VARIABLES.QUEUE_NAME),
  QUEUE_NAME_RMQ: getEnv(ENVIRONMENT_VARIABLES.QUEUE_NAME_RMQ),
  REDIS_PASSWORD:getEnv(ENVIRONMENT_VARIABLES.REDIS_PASSWORD),
  REDIS_HOST: getEnv(ENVIRONMENT_VARIABLES.REDIS_HOST),
  REDIS_PORT: getEnv(ENVIRONMENT_VARIABLES.REDIS_PORT)
  
};
